// <auto-generated />
using System;
using DayJT.Journal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DayJTrading.Journal.Data.Migrations
{
    [DbContext(typeof(TradingJournalDataContext))]
    partial class TradingJournalDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DayJT.Journal.Data.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentType")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CostRelevance")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<bool>("IsRelevantForOverview")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceRelevance")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TradeComponentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TradeComponentId");

                    b.ToTable("TradeInputComponents");
                });

            modelBuilder.Entity("DayJT.Journal.Data.CellContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CellId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId1")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.HasIndex("CellId1")
                        .IsUnique();

                    b.ToTable("ContentModels");
                });

            modelBuilder.Entity("DayJT.Journal.Data.TradeComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TradeActionType")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<Guid>("TradePositionCompositeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TradePositionCompositeId");

                    b.ToTable("TradeInputs");
                });

            modelBuilder.Entity("DayJT.Journal.Data.TradePositionComposite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OverallTrades");
                });

            modelBuilder.Entity("DayJT.Journal.Data.Cell", b =>
                {
                    b.HasOne("DayJT.Journal.Data.TradeComponent", "TradeComponent")
                        .WithMany("TradeActionInfoCells")
                        .HasForeignKey("TradeComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeComponent");
                });

            modelBuilder.Entity("DayJT.Journal.Data.CellContent", b =>
                {
                    b.HasOne("DayJT.Journal.Data.Cell", "Cell")
                        .WithMany("History")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DayJT.Journal.Data.Cell", null)
                        .WithOne("ContentWrapper")
                        .HasForeignKey("DayJT.Journal.Data.CellContent", "CellId1");

                    b.Navigation("Cell");
                });

            modelBuilder.Entity("DayJT.Journal.Data.TradeComponent", b =>
                {
                    b.HasOne("DayJT.Journal.Data.TradePositionComposite", "TradePositionComposite")
                        .WithMany("TradeComponents")
                        .HasForeignKey("TradePositionCompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradePositionComposite");
                });

            modelBuilder.Entity("DayJT.Journal.Data.Cell", b =>
                {
                    b.Navigation("ContentWrapper")
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("DayJT.Journal.Data.TradeComponent", b =>
                {
                    b.Navigation("TradeActionInfoCells");
                });

            modelBuilder.Entity("DayJT.Journal.Data.TradePositionComposite", b =>
                {
                    b.Navigation("TradeComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
