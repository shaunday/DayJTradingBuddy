import { useMutation, useQueryClient } from 'react-query';

// API call function
const updateTrade = async (updatedTrade) => {
  const response = await fetch(`/api/trades/${updatedTrade.id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedTrade),
  });
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

// Component for updating trade
const UpdateTradeComponent = ({ trade }) => {
  const queryClient = useQueryClient();

  const mutation = useMutation(updateTrade, {
    onMutate: async (updatedTrade) => {
      // Snapshot the previous state
      const previousTrade = queryClient.getQueryData(['trades', trade.id]);

      // Optimistically update the cache
      queryClient.setQueryData(['trades', trade.id], (old) => {
        if (!old) return old;

        // Manually update the nested data
        const updated = {
          ...old,
          ...updatedTrade,
          tradeComposite: old.tradeComposite.map(tc =>
            updatedTrade.tradeComposite.find(updatedTc => updatedTc.id === tc.id) || tc
          ).map(tc => ({
            ...tc,
            cells: tc.cells.map(cell =>
              updatedTrade.tradeComposite.flatMap(tc => tc.cells).find(updatedCell => updatedCell.id === cell.id) || cell
            ),
          })),
        };

        return updated;
      });

      return { previousTrade };
    },
    onError: (error, updatedTrade, context) => {
      queryClient.setQueryData(['trades', trade.id], context.previousTrade);
    },
    onSettled: () => {
      queryClient.invalidateQueries('trades');
    },
  });

  const handleUpdate = () => {
    const updatedTrade = {
      ...trade,
      tradeComposite: trade.tradeComposite.map(tc => ({
        ...tc,
        cells: tc.cells.map(cell => ({
          ...cell,
          // Example update
          value: cell.value === 'oldValue' ? 'newValue' : cell.value,
        })),
      })),
    };
    mutation.mutate(updatedTrade);
  };

  if (mutation.isLoading) return <div>Updating...</div>;
  if (mutation.isError) return <div>Error: {mutation.error.message}</div>;
  if (mutation.isSuccess) return <div>Trade updated!</div>;

  return <button onClick={handleUpdate}>Update Trade</button>;
};